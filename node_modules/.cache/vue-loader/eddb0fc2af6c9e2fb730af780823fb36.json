{"remainingRequest":"C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\src\\components\\VueImageVerify.vue?vue&type=template&id=1d03f37e","dependencies":[{"path":"C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\src\\components\\VueImageVerify.vue","mtime":1644923803077},{"path":"C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3M9ImltZy12ZXJpZnkiPg0KICAgIDxjYW52YXMgcmVmPSJ2ZXJpZnkiIDp3aWR0aD0id2lkdGgiIDpoZWlnaHQ9ImhlaWdodCIgQGNsaWNrPSJoYW5kbGVEcmF3Ij48L2NhbnZhcz4NCiAgPC9kaXY+DQo="},{"version":3,"sources":["C:\\Users\\lenovo\\Desktop\\cost\\daily-cost\\src\\components\\VueImageVerify.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnF,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/lenovo/Desktop/cost/daily-cost/src/components/VueImageVerify.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"img-verify\">\r\n    <canvas ref=\"verify\" :width=\"width\" :height=\"height\" @click=\"handleDraw\"></canvas>\r\n  </div>\r\n</template>\r\n<script type=\"text/ecmascript-6\">\r\nimport { reactive, onMounted, ref, toRefs } from 'vue'\r\nexport default {\r\n  setup() {\r\n    const verify = ref(null)\r\n    const state = reactive({\r\n      pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', // 字符串\r\n      width: 120,\r\n      height: 40,\r\n      imgCode: ''\r\n    })\r\n    onMounted(() => {\r\n      // 初始化绘制图片验证码\r\n      state.imgCode = draw()\r\n    })\r\n    \r\n    // 点击图片重新绘制\r\n    const handleDraw = () => {\r\n      state.imgCode = draw()\r\n    }\r\n\r\n    // 随机数\r\n    const randomNum = (min, max) => {\r\n      return parseInt(Math.random() * (max - min) + min)\r\n    }\r\n    // 随机颜色\r\n    const randomColor = (min, max) => {\r\n      const r = randomNum(min, max)\r\n      const g = randomNum(min, max)\r\n      const b = randomNum(min, max)\r\n      return `rgb(${r},${g},${b})`\r\n    }\r\n\r\n    // 绘制图片\r\n    /**\r\n    * 代码的关键点就在 draw 方法，\r\n    * 该方法内通过 verify.value.getContext('2d') 方法返回一个用于在画布上绘图的环境，\r\n    * 赋值给 ctx 后，可以通过 ctx 在 canvas 画布上做文章。\r\n    *\r\n    * 点击验证码的时候，注意要重新初始化 draw 方法，并将生成的值返回给 imgCode，\r\n    * 后续调用组件的时候，可以从外部通过 ref，拿到组件内的 imgCode 变量，\r\n    * 然后再于用户输入的值进行比较，这里若是不重新赋值，imgCode 会失去时效性\r\n    */\r\n    const draw = () => {\r\n      // 3.填充背景颜色，背景颜色要浅一点\r\n      const ctx = verify.value.getContext('2d')\r\n      // 填充颜色\r\n      ctx.fillStyle = randomColor(180, 230)\r\n      // 填充的位置\r\n      ctx.fillRect(0, 0, state.width, state.height)\r\n      // 定义paramText\r\n      let imgCode = ''\r\n      // 4.随机产生字符串，并且随机旋转\r\n      for (let i = 0; i < 4; i++) {\r\n        // 随机的四个字\r\n        const text = state.pool[randomNum(0, state.pool.length)]\r\n        imgCode += text\r\n        // 随机的字体大小\r\n        const fontSize = randomNum(18, 40)\r\n        // 字体随机的旋转角度\r\n        const deg = randomNum(-30, 30)\r\n        /*\r\n         * 绘制文字并让四个文字在不同的位置显示的思路 :\r\n         * 1、定义字体\r\n         * 2、定义对齐方式\r\n         * 3、填充不同的颜色\r\n         * 4、保存当前的状态（以防止以上的状态受影响）\r\n         * 5、平移 translate()\r\n         * 6、旋转 rotate()\r\n         * 7、填充文字\r\n         * 8、restore 出栈\r\n         * */\r\n        ctx.font = fontSize + 'px Simhei'\r\n        ctx.textBaseline = 'top'\r\n        ctx.fillStyle = randomColor(80, 150)\r\n        /*\r\n         * save() 方法把当前状态的一份拷贝压入到一个保存图像状态的栈中。\r\n         * 这就允许您临时地改变图像状态，\r\n         * 然后，通过调用 restore() 来恢复以前的值。\r\n         * save是入栈，restore 是出栈。\r\n         * 用来保存Canvas的状态。save 之后，可以调用 Canvas 的平移、放缩、旋转、错切、裁剪等操作。 restore：用来恢复 Canvas 之前保存的状态。防止 save 后对 Canvas 执行的操作对后续的绘制有影响。\r\n         *\r\n         * */\r\n        ctx.save()\r\n        ctx.translate(30 * i + 15, 15)\r\n        ctx.rotate((deg * Math.PI) / 180)\r\n        // fillText() 方法在画布上绘制填色的文本。文本的默认颜色是黑色。\r\n        // 请使用 font 属性来定义字体和字号，并使用 fillStyle 属性以另一种颜色/渐变来渲染文本。\r\n        // context.fillText(text,x,y,maxWidth);\r\n        ctx.fillText(text, -15 + 5, -15)\r\n        ctx.restore()\r\n      }\r\n      // 5.随机产生5条干扰线,干扰线的颜色要浅一点\r\n      for (let i = 0; i < 5; i++) {\r\n        ctx.beginPath()\r\n        ctx.moveTo(randomNum(0, state.width), randomNum(0, state.height))\r\n        ctx.lineTo(randomNum(0, state.width), randomNum(0, state.height))\r\n        ctx.strokeStyle = randomColor(180, 230)\r\n        ctx.closePath()\r\n        ctx.stroke()\r\n      }\r\n      // 6.随机产生40个干扰的小点\r\n      for (let i = 0; i < 40; i++) {\r\n        ctx.beginPath()\r\n        ctx.arc(randomNum(0, state.width), randomNum(0, state.height), 1, 0, 2 * Math.PI)\r\n        ctx.closePath()\r\n        ctx.fillStyle = randomColor(150, 200)\r\n        ctx.fill()\r\n      }\r\n      return imgCode\r\n    }\r\n\r\n    return {\r\n      ...toRefs(state),\r\n      verify,\r\n      handleDraw\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style type=\"text/css\">\r\n.img-verify canvas {\r\n  cursor: pointer;\r\n}\r\n</style>"]}]}